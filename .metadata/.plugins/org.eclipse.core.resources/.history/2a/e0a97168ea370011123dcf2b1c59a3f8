#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int* b) {
	*a = *a ^ *b;
	*b = *a ^ *b;
	*a = *a ^ *b;
//	int temp = *a;
//	*a = *b;
//	*b = temp;

}

void insertionSort(int arr[], int s, int e) {
	int j = s + 1;

	while (j <= e) {
		int i = j;
		int val = arr[j];

		while (i > s && val < arr[i - 1]) { //<=====================
			arr[i] = arr[i - 1];
			i--;
		}
		arr[i] = val;
		j++;
		int k = 0;
		while (k < 6)
			printf("%d ", arr[k++]);
		printf("\n");
	}
}

void selectionSort(int arr[], int s, int e) {
	int i = s;

	while (i < e) {
		int j = i;
		int min = j;

		while (j <= e) {
			min = arr[min] < arr[j] ? min : j;
			j++;
		}
		swap(&arr[i], &arr[min]);
		i++;
	}
}

int partition(int a[], int s, int e) {
	int i = s - 1;
	int j = s;

	while (j < e) {
		if (a[j] <= a[e]) {
			i++;
			swap(&a[i], &a[j]);
		}
		j++;
	}
	i++;
	swap(&a[i], &a[e]);
	return i;
}

void quickSort(int a[], int s, int e) {
	if (s < e) {
		int m = partition(a, s, e);
		quickSort(a, s, m - 1);
		quickSort(a, m + 1, e);

	}

}

void merge(int a[], int s, int e) {
	int b[6];
	int i, j, k;

	int m = (e - s) / 2;

	while (i <= m) {
		b[i] = a[s + i];
		i++;
	}

	i = 0;
	j = s + m + 1;
	k = s;
	while (i <= m && j <= e) {
		if (b[i] < a[j])
			a[k++] = b[i++];
		else
			a[k++] = a[j++];
	}

	while (i <= m)
		a[k++] = b[i++];

}

void mergeSort(int a[], int s, int e) {
	if (s < e) {
		int m = (e - s) / 2 + s;
		mergeSort(a, s, m);
		mergeSort(a, m + 1, e);
		merge(a, s, e);
	}
}

void glasses(int N, int level, int c) {
	float *content = (float *) malloc(level * sizeof(float));
	float *overflow = (float *) malloc(level * sizeof(float));
	float *temp;
	int i, j;

	content[0] = N;
	for (i = 0; i < level; i++) {
		for (j = 0; j <= i + 1; j++)
			overflow[j] = 0;
		int flag = 0;
		for (j = 0; j <= i; j++) {
			if (content[i] > c) {
				overflow[i] = overflow[i] + (content[i] - c) / 2;
				overflow[i + 1] = overflow[i] +  (content[i] - c) / 2;
				content[i] = c;
				flag = 1;
			}
		}
		for (j = 0; j <= i+1; j++)
			printf("%f ", overflow[i]);
		printf("\n ");
		if (!flag)
			return;

		temp = content;
		content = overflow;
		overflow = temp;

	}
}

int main() {
	/*	int i = 0;
	 //int b=-1;
	 int arr[6] = { 60, -6, 5, 12, 3, 0 };
	 //int barr[4];
	 mergeSort(arr,0,3);
	 while (i < 6){
	 //extract(arr,&barr[i],&b);
	 printf("%d ", arr[i++]);
	 }*/
	glasses(50, 6, 5);
	return 0;
}

