#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int* b) {
	*a = *a ^ *b;
	*b = *a ^ *b;
	*a = *a ^ *b;
//	int temp = *a;
//	*a = *b;
//	*b = temp;

}

void insertionSort(int arr[], int s, int e) {
	int j = s + 1;

	while (j <= e) {
		int i = j;
		int val = arr[j];

		while (i > s && val < arr[i - 1]) { //<=====================
			arr[i] = arr[i - 1];
			i--;
		}
		arr[i] = val;
		j++;
		int k = 0;
		while (k < 6)
			printf("%d ", arr[k++]);
		printf("\n");
	}
}

void selectionSort(int arr[], int s, int e) {
	int i = s;

	while (i < e) {
		int j = i;
		int min = j;

		while (j <= e) {
			min = arr[min] < arr[j] ? min : j;
			j++;
		}
		swap(&arr[i], &arr[min]);
		i++;
	}
}

int partition(int a[], int s, int e) {
	int i = s - 1;
	int j = s;

	while (j < e) {
		if (a[j] <= a[e]) {
			i++;
			swap(&a[i], &a[j]);
		}
		j++;
	}
	i++;
	swap(&a[i], &a[e]);
	return i;
}

void quickSort(int a[], int s, int e) {
	if (s < e) {
		int m = partition(a, s, e);
		quickSort(a, s, m - 1);
		quickSort(a, m + 1, e);

	}

}

void merge(int a[], int s, int e) {
	int b[6];
	int i,j,k;

	int m = (e-s)/2;

	while(s+i <= m){
		b[i] = a[s+i];
		i++;
	}

	i=0;
	j=m+1;
	k=s;
	while(i<=(s-m) && j<=e){
		if(b[i] < a[j])
			a[k++] = b[i++];
		else
			a[k++] = a[j++];
	}

	while(i<=(s-m))
		a[k++] = b[i++];



}

void mergeSort(int a[], int s, int e) {
	if (s < e) {
		int m = (e - s) / 2 + s;
		mergeSort(a, s, m);
		mergeSort(a, m + 1, e);
		merge(a, s, e);
	}
}


int main() {
	int i = 0;
	//int b=-1;
	int arr[6] = { 60, -6, 60, 12, 3, 0 };
	//int barr[4];
	mergeSort(arr,0,2);
	while (i < 6){
		//extract(arr,&barr[i],&b);
		printf("%d ", arr[i++]);
	}

	return 0;
}

